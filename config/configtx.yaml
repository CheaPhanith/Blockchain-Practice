# Updated for Fabric 2.x
# Simplified configtx.yaml

#   CAPABILITIES
Capabilities:
  Application: &ApplicationCapabilities
    V2_0: true
  Orderer: &OrdererCapabilities
    V2_0: true
  Channel: &ChannelCapabilities
    V2_0: true

# ORGANIZATIONS
Organizations:
  - &Orderer
    Name: OrdererMSP
    SkipAsForeign: false
    ID: OrdererMSP
    MSPDir: ../crypto-config/ordererOrganizations/example.com/msp
    Policies: &OrdererDefaults
      Readers:
          Type: Signature
          # Rule: "OR('OrdererMSP.admin', 'OrdererMSP.peer', 'OrdererMSP.client')"
          Rule: "OR('OrdererMSP.member')"
      Writers:
          Type: Signature
          # Rule: "OR('OrdererMSP.admin', 'OrdererMSP.client')"
          Rule: "OR('OrdererMSP.member')"
      Admins:
          Type: Signature
          Rule: "OR('OrdererMSP.member')"
      Endorsement:
          Type: Signature
          Rule: "OR('OrdererMSP.member')"

  - &Org1
    Name: Org1
    ID: Org1MSP
    MSPDir: ../crypto-config/peerOrganizations/org1.example.com/msp
    Policies: 
      Readers:
          Type: Signature
          # Rule: "OR('Org1MSP.admin', 'Org1MSP.peer', 'Org1MSP.client')"
          Rule: "OR('Org1MSP.member')"
      Writers:
          Type: Signature
          # Rule: "OR('Org1MSP.admin', 'Org1MSP.client')"
          Rule: "OR('Org1MSP.member')"
      Admins:
          Type: Signature
          # UPDATE: This is a dev env so its OK in Prod ... use AcmeMSP.admin
          Rule: "OR('Org1MSP.member')"
      Endorsement:
          Type: Signature
          Rule: "OR('Org1MSP.member')"
    AnchorPeers:
      - Host: localhost
        Port: 7051

  - &Org2
    Name: Org2
    ID: Org2MSP
    MSPDir: ../crypto-config/peerOrganizations/org2.example.com/msp
    Policies:
      Readers:
          Type: Signature
          # Rule: "OR('Org2MSP.admin', 'Org2MSP.peer', 'Org2MSP.client')"
          Rule: "OR('Org2MSP.member')"
      Writers:
          Type: Signature
          # Rule: "OR('Org2MSP.admin', 'Org2MSP.client')"
          Rule: "OR('Org2MSP.member')"
      Admins:
          Type: Signature
          # - This is a dev env so its OK in Prod ... use AcmeMSP.admin
          Rule: "OR('Org2MSP.member')"
      Endorsement:
          Type: Signature
          Rule: "OR('Org2MSP.member')"
    AnchorPeers:
      - Host: localhost
        Port: 8052
        
#   ORDERER
Orderer: &OrdererDefaults

  OrdererType: solo

  Addresses:
    - localhost:7050

  # Policies for Orderer
  Policies:
    Readers:
        Type: ImplicitMeta
        Rule: "ANY Readers"
    Writers:
        Type: ImplicitMeta
        Rule: "ANY Writers"
    Admins:
        Type: ImplicitMeta  
        # UPDATED December 15, 2019
        Rule: "ANY Admins"
        # Rule: "MAJORITY Admins"

    # BlockValidation specifies what signatures must be included in the block
    # from the orderer for the peer to validate it.
    BlockValidation:
        Type: ImplicitMeta
        Rule: "ANY Writers"

  # Batch Timeout: The amount of time to wait before creating a batch
  BatchTimeout: 2s

  # Batch Size: Controls the number of messages batched into a block
  BatchSize:
    MaxMessageCount: 10
    AbsoluteMaxBytes: 98 MB
    PreferredMaxBytes: 512 KB

  Capabilities:
    <<: *OrdererCapabilities


Application: &ApplicationDefaults
    ACLs: &ACLsDefault
        # This section provides defaults for policies for various resources
        # in the system. These "resources" could be functions on system chaincodes
        # (e.g., "GetBlockByNumber" on the "qscc" system chaincode) or other resources
        # (e.g.,who can receive Block events). This section does NOT specify the resource's
        # definition or API, but just the ACL policy for it.
        #
        # Users can override these defaults with their own policy mapping by defining the
        # mapping under ACLs in their channel definition

        #---New Lifecycle System Chaincode (_lifecycle) function to policy mapping for access control--#

        # ACL policy for _lifecycle's "CheckCommitReadiness" function
        _lifecycle/CheckCommitReadiness: /Channel/Application/Writers

        # ACL policy for _lifecycle's "CommitChaincodeDefinition" function
        _lifecycle/CommitChaincodeDefinition: /Channel/Application/Writers

        # ACL policy for _lifecycle's "QueryChaincodeDefinition" function
        _lifecycle/QueryChaincodeDefinition: /Channel/Application/Writers

        # ACL policy for _lifecycle's "QueryChaincodeDefinitions" function
        _lifecycle/QueryChaincodeDefinitions: /Channel/Application/Writers

        #---Lifecycle System Chaincode (lscc) function to policy mapping for access control---#

        # ACL policy for lscc's "getid" function
        lscc/ChaincodeExists: /Channel/Application/Readers

        # ACL policy for lscc's "getdepspec" function
        lscc/GetDeploymentSpec: /Channel/Application/Readers

        # ACL policy for lscc's "getccdata" function
        lscc/GetChaincodeData: /Channel/Application/Readers

        # ACL Policy for lscc's "getchaincodes" function
        lscc/GetInstantiatedChaincodes: /Channel/Application/Readers

        #---Query System Chaincode (qscc) function to policy mapping for access control---#

        # ACL policy for qscc's "GetChainInfo" function
        qscc/GetChainInfo: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByNumber" function
        qscc/GetBlockByNumber: /Channel/Application/Readers

        # ACL policy for qscc's  "GetBlockByHash" function
        qscc/GetBlockByHash: /Channel/Application/Readers

        # ACL policy for qscc's "GetTransactionByID" function
        qscc/GetTransactionByID: /Channel/Application/Readers

        # ACL policy for qscc's "GetBlockByTxID" function
        qscc/GetBlockByTxID: /Channel/Application/Readers

        #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

        # ACL policy for cscc's "GetConfigBlock" function
        cscc/GetConfigBlock: /Channel/Application/Readers

        # ACL policy for cscc's "GetChannelConfig" function
        cscc/GetChannelConfig: /Channel/Application/Readers

        #---Miscellaneous peer function to policy mapping for access control---#

        # ACL policy for invoking chaincodes on peer
        peer/Propose: /Channel/Application/Writers

        # ACL policy for chaincode to chaincode invocation
        peer/ChaincodeToChaincode: /Channel/Application/Writers

        #---Events resource to policy mapping for access control###---#

        # ACL policy for sending block events
        event/Block: /Channel/Application/Readers

        # ACL policy for sending filtered block events
        event/FilteredBlock: /Channel/Application/Readers

    # Organizations lists the orgs participating on the application side of the
    # network.
    Organizations:

    # Policies defines the set of policies at this level of the config tree
    # For Application policies, their canonical path is
    #   /Channel/Application/<PolicyName>
    Policies: &ApplicationDefaultPolicies
        LifecycleEndorsement:
            Type: ImplicitMeta
            Rule: "MAJORITY Endorsement"
        Endorsement:
            Type: ImplicitMeta
            Rule: "MAJORITY Endorsement"
        Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
        Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
        Admins:
            Type: ImplicitMeta
            Rule: "MAJORITY Admins"

    # Capabilities describes the application level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *ApplicationCapabilities


#   CHANNEL
Channel: &ChannelDefaults
  Policies:
    Readers:
        Type: ImplicitMeta
        Rule: "ANY Readers"
    Writers:
        Type: ImplicitMeta
        Rule: "ANY Writers"
    Admins:
        Type: ImplicitMeta
        Rule: "MAJORITY Admins"

  Capabilities:
    <<: *ChannelCapabilities
 
#   PROFILES
Profiles:

  TwoOrgsGenesis:
      <<: *ChannelDefaults
      Orderer:
          <<: *OrdererDefaults
          Organizations:
              - <<: *Orderer
      Consortiums:
        TestNetworkConsortium:   
            Organizations:
                  - <<: *Org1
                  - <<: *Org2
                  
  TwoOrgsChannel:
    <<: *ChannelDefaults
    Consortium: TestNetworkConsortium
        
    Application:
        <<: *ApplicationDefaults
        Organizations:
            - <<: *Org1
            - <<: *Org2
